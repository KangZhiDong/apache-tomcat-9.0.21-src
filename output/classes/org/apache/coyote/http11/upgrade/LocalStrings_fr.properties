# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

upgrade.sis.errorCloseFail=Impossible de fermer l'InputStream proprement apr\u00e8s une pr\u00e9c\u00e9dente erreur
upgrade.sis.isFinished.ise=Il est ill\u00e9gal d'appeler isFinished() quand le ServletInputStream n'est pas en mode non bloquant, c'est \u00e0 dire que setReadListener() doit d'abord \u00eatre appel\u00e9
upgrade.sis.isReady.ise=il est ill\u00e9gal d'appeler isReady() quand le ServletInputStream n'est pas en mode non bloquant, c'est \u00e0 dire que setReadListener() doit d'abord \u00eatre appel\u00e9
upgrade.sis.onErrorFail=Le traitement de onError pour le ReadListener configur\u00e9 a caus\u00e9 cette erreur qui a \u00e9t\u00e9 aval\u00e9e
upgrade.sis.read.closed=Le flux d'entr\u00e9e (InputStream) a \u00e9t\u00e9 ferm\u00e9
upgrade.sis.read.ise=Il est interdit d'appeler une des m\u00e9thodes read() en mode non bloquant avant de d'abord v\u00e9rifier qu'il y a des donn\u00e9es disponibles en utilisant isReady()
upgrade.sis.readListener.null=Il est ill\u00e9gal de passer un argument null \u00e0 setReadListener()
upgrade.sis.readListener.set=Il est interdit d'appeler setReadListener() plus d'une fois pour une m\u00eame connection upgrad\u00e9e
upgrade.sos.canWrite.ise=il est ill\u00e9gal d'appeler canWrite() quand le ServletOutputStream n'est pas en mode non bloquant, c'est \u00e0 dire que setWriteListener() doit d'abord \u00eatre appel\u00e9
upgrade.sos.errorCloseFail=Impossible de fermer l'OutputStream proprement apr\u00e8s une pr\u00e9c\u00e9dente erreur
upgrade.sos.onErrorFail=Le traitement de onError pour le WriteListener configur\u00e9 a caus\u00e9 cette erreur qui a \u00e9t\u00e9 aval\u00e9e
upgrade.sos.write.closed=L'OutputSteam a \u00e9t\u00e9 ferm\u00e9e
upgrade.sos.write.ise=Il est interdit d'appeler une des m\u00e9thodes write() en mode non bloquant avant de d'abord v\u00e9rifier qu'il y a de la place disponible en utilisant isReady()
upgrade.sos.writeListener.null=Il est ill\u00e9gal de passer un argument null \u00e0 setWriteListener()
upgrade.sos.writeListener.set=Il est interdit d'appeler setWriteListener() plus d'une fois pour une m\u00eame connection upgrad\u00e9e

upgradeProcessor.isCloseFail=Impossible de fermer l'InputStream associ\u00e9e avec la connection upgrad\u00e9e
upgradeProcessor.osCloseFail=Impossible de fermer l'OutputStream associ\u00e9e avec la connection upgrad\u00e9e
upgradeProcessor.requiredClose=Fermeture de la connection upgrad\u00e9e \u00e0 cause de l''\u00e9tat du closeRequired des flux: Entr\u00e9e [{0}] Sortie [{1}]
upgradeProcessor.stop=Fermeture de la connection upgrad\u00e9e car l'\u00e9tat du socket est STOP
upgradeProcessor.unexpectedState=Fermeture inattendue de la connection upgrad\u00e9e alors que le statut du socket en lecture est [{0}]
