# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SecurityUtil.doAsPrivilege=Une exception s'est produite lors de l'execution du bloc PrivilegedExceptionAction.

customObjectInputStream.logRequired=Un enregistreur ("logger") valide est requis pour filtrer par nom de classe
customObjectInputStream.nomatch=La classe [{0}] n''est pas accept\u00e9e par l''expression r\u00e9guli\u00e8re [{1}] qui autorise la d\u00e9s\u00e9rialisation

extensionValidator.extension-not-found-error=ExtensionValidator[{0}][{1}]: L''extension requise [{2}] est introuvable.
extensionValidator.extension-validation-error=ExtensionValidator[{0}]: Impossible de trouver [{1}] extension(s) requise(s).
extensionValidator.failload=Erreur de chargement de l''extension [{0}]
extensionValidator.web-application-manifest=Web Application Manifest

introspection.classLoadFailed=Echec du chargement de la classe [{0}]

lifecycleBase.alreadyDestroyed=La m\u00e9thode destroy() a \u00e9t\u00e9 appel\u00e9e sur le composant [{0}] apr\u00e8s que destroy() ait d\u00e9j\u00e0 \u00e9t\u00e9 appel\u00e9, le deuxi\u00e8me appel sera ignor\u00e9
lifecycleBase.alreadyStarted=La m\u00e9thode start() a \u00e9t\u00e9 appel\u00e9e sur le composant [{0}] apr\u00e8s que start() ait d\u00e9j\u00e0 \u00e9t\u00e9 appel\u00e9, le deuxi\u00e8me appel sera ignor\u00e9
lifecycleBase.alreadyStopped=La m\u00e9thode stop() a \u00e9t\u00e9 appel\u00e9e sur le composant [{0}] apr\u00e8s que stop() ait d\u00e9j\u00e0 \u00e9t\u00e9 appel\u00e9, le deuxi\u00e8me appel sera ignor\u00e9
lifecycleBase.destroyFail=Echec de la destruction du composant [{0}]
lifecycleBase.destroyStopFail=L''appel de stop() sur le composant en \u00e9chec [{0}] pour causer un nettoyage a \u00e9chou\u00e9
lifecycleBase.initFail=Echec d''initialisation du composant [{0}]
lifecycleBase.invalidTransition=Un transition de Lifecycle invalide a \u00e9t\u00e9 tent\u00e9e ([{0}]) pour le composant [{1}] dans l''\u00e9tat [{2}]
lifecycleBase.setState=Fixe l''\u00e9tat pour [{0}] \u00e0 [{1}]
lifecycleBase.startFail=Echec de d\u00e9marrage du composant [{0}]
lifecycleBase.stopFail=Echec de l''arr\u00eat du composant [{0}]

lifecycleMBeanBase.registerFail=Echec de l''enregistrement de l''objet [{0}] avec le nom [{1}] pendant l''initialisation du composant

netmask.cidrNegative=Le CIDR [{0}] est n\u00e9gatif
netmask.cidrNotNumeric=Le CIDR [{0}] n''est pas un nombre
netmask.cidrTooBig=Le CIDR [{0}] est plus grand que la longueur de l''adresse [{1}]
netmask.invalidAddress=L''adresse [{0}] est invalide

parameterMap.locked=Aucune modification n'est autoris\u00e9e sur un ParameterMap verrouill\u00e9

resourceSet.locked=Aucune modification n'est autoris\u00e9e sur un ResourceSet verrouill\u00e9

sessionIdGeneratorBase.createRandom=La cr\u00e9ation de l''instance de SecureRandom pour le g\u00e9n\u00e9rateur d''id de session en utilisant [{0}] a pris [{1}] millisecondes
sessionIdGeneratorBase.random=Exception durant l''initialisation de la classe du g\u00e9n\u00e9rateur de nombre al\u00e9atoire [{0}]
sessionIdGeneratorBase.randomAlgorithm=Erreur lors de l''initialisation du g\u00e9n\u00e9rateur de nombres al\u00e9atoires en utilisant l''algorithme [{0}]
sessionIdGeneratorBase.randomProvider=Exception lors de l''initialisation du g\u00e9n\u00e9rateur de nombres al\u00e9atoires utilisant le fournisseur [{0}]
